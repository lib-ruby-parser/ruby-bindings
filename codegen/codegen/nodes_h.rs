use lib_ruby_parser_nodes::template::*;

const TEMPLATE: &str = "#ifndef NODES_H
#define NODES_H

// This file is autogenerated by {{ helper generated-by }}

#include <stdint.h>
#include <ruby.h>
#include \"c-bindings/lib-ruby-parser.h\"

#define CSTR_TO_SYM(s) ID2SYM(rb_intern(s))

static VALUE LIB_RUBY_PARSER_Loc__to_ruby(LIB_RUBY_PARSER_Loc *loc);
static VALUE LIB_RUBY_PARSER_MaybeLoc__to_ruby(LIB_RUBY_PARSER_MaybeLoc *maybe_loc);
static VALUE LIB_RUBY_PARSER_NodeList__to_ruby(LIB_RUBY_PARSER_NodeList *list);
static VALUE LIB_RUBY_PARSER_String__to_ruby(LIB_RUBY_PARSER_String *string);
static VALUE LIB_RUBY_PARSER_MaybeString__to_ruby(LIB_RUBY_PARSER_MaybeString *maybe_string);
static VALUE LIB_RUBY_PARSER_Node__to_ruby(LIB_RUBY_PARSER_Node *node);
static VALUE LIB_RUBY_PARSER_NodePtr__to_ruby(LIB_RUBY_PARSER_Node **node);
static VALUE LIB_RUBY_PARSER_MaybeNodePtr__to_ruby(LIB_RUBY_PARSER_Node **maybe_node);
static VALUE LIB_RUBY_PARSER_Bytes__to_ruby(LIB_RUBY_PARSER_Bytes *bytes);
static VALUE uint8_t__to_ruby(uint8_t *n);

{{ each node }}<dnl>
static VALUE LIB_RUBY_PARSER_{{ helper node-camelcase-name }}__to_ruby(LIB_RUBY_PARSER_{{ helper node-camelcase-name }} *variant)
{
    VALUE rb_mLibRubyParser = rb_define_module(\"LibRubyParser\");
    VALUE rb_mNodes = rb_const_get(rb_mLibRubyParser, rb_intern(\"Nodes\"));
    VALUE rb_c{{ helper node-camelcase-name }} = rb_const_get(rb_mNodes, rb_intern(\"{{ helper node-camelcase-name }}\"));
    VALUE rb_result = rb_obj_alloc(rb_c{{ helper node-camelcase-name }});
{{ each node-field }}<dnl>
    rb_ivar_set(rb_result, rb_intern(\"@{{ helper node-field-name }}\"), {{ helper field-to-ruby-fn-name }}__to_ruby(&(variant->{{ helper node-field-c-name }})));
{{ end }}
    return rb_result;
}
{{ end }}<dnl>

static VALUE LIB_RUBY_PARSER_Node__to_ruby(LIB_RUBY_PARSER_Node *node)
{
    switch(node->tag)
    {
{{ each node }}<dnl>
        case LIB_RUBY_PARSER_NODE_{{ helper node-upper-name }}:
            return LIB_RUBY_PARSER_{{ helper node-camelcase-name }}__to_ruby(&(node->as.{{ helper node-c-union-member-name }}));
{{ end }}<dnl>
        default:
            return Qnil;
    }
}

#endif // NODES_H
";

pub(crate) fn codegen() {
    let template = TemplateRoot::new(TEMPLATE).unwrap();
    let fns = crate::codegen::fns::default_fns!();

    let contents = template.render(ALL_DATA, &fns);
    std::fs::write("../nodes.h", contents).unwrap();
}
