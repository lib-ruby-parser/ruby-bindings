#ifndef NODES_H
#define NODES_H

// This file is autogenerated by {{ template }}

#include <stdint.h>
#include <ruby.h>
#include "c-bindings/lib-ruby-parser.h"

#define CSTR_TO_SYM(s) ID2SYM(rb_intern(s))

static VALUE LIB_RUBY_PARSER_Loc__to_ruby(LIB_RUBY_PARSER_Loc *loc);
static VALUE LIB_RUBY_PARSER_MaybeLoc__to_ruby(LIB_RUBY_PARSER_MaybeLoc *maybe_loc);
static VALUE LIB_RUBY_PARSER_NodeList__to_ruby(LIB_RUBY_PARSER_NodeList *list);
static VALUE LIB_RUBY_PARSER_String__to_ruby(LIB_RUBY_PARSER_String *string);
static VALUE LIB_RUBY_PARSER_MaybeString__to_ruby(LIB_RUBY_PARSER_MaybeString *maybe_string);
static VALUE LIB_RUBY_PARSER_Node__to_ruby(LIB_RUBY_PARSER_Node *node);
static VALUE LIB_RUBY_PARSER_NodePtr__to_ruby(LIB_RUBY_PARSER_Node **node);
static VALUE LIB_RUBY_PARSER_MaybeNodePtr__to_ruby(LIB_RUBY_PARSER_Node **maybe_node);
static VALUE LIB_RUBY_PARSER_Bytes__to_ruby(LIB_RUBY_PARSER_Bytes *bytes);
static VALUE uint8_t__to_ruby(uint8_t *n);

{% for node in nodes %}
static VALUE LIB_RUBY_PARSER_{{ node.camelcase_name }}__to_ruby(LIB_RUBY_PARSER_{{ node.camelcase_name }} *variant)
{
    VALUE rb_mLibRubyParser = rb_const_get(rb_cObject, rb_intern("LibRubyParser"));
    VALUE rb_mNodes = rb_const_get(rb_mLibRubyParser, rb_intern("Nodes"));
    VALUE rb_c{{ node.camelcase_name }} = rb_const_get(rb_mNodes, rb_intern("{{ node.camelcase_name }}"));
    VALUE rb_result = rb_obj_alloc(rb_c{{ node.camelcase_name }});
    {% for field in node.fields %}
    {% case field.field_type %}
    {% when "Node" %}
    {% assign fn_prefix = "LIB_RUBY_PARSER_NodePtr" %}
    {% when "Nodes" %}
    {% assign fn_prefix = "LIB_RUBY_PARSER_NodeList" %}
    {% when "MaybeNode" or "RegexpOptions" %}
    {% assign fn_prefix = "LIB_RUBY_PARSER_MaybeNodePtr" %}
    {% when "Loc" %}
    {% assign fn_prefix = "LIB_RUBY_PARSER_Loc" %}
    {% when "MaybeLoc" %}
    {% assign fn_prefix = "LIB_RUBY_PARSER_MaybeLoc" %}
    {% when "Str" or "RawStr" %}
    {% assign fn_prefix = "LIB_RUBY_PARSER_String" %}
    {% when "MaybeStr" or "Chars" %}
    {% assign fn_prefix = "LIB_RUBY_PARSER_MaybeString" %}
    {% when "StringValue" %}
    {% assign fn_prefix = "LIB_RUBY_PARSER_Bytes" %}
    {% when "U8" %}
    {% assign fn_prefix = "uint8_t" %}
    {% else %}
    {% assign fn_prefix = "COMPILE ERROR" %}
    {% endcase %}
    rb_ivar_set(rb_result, rb_intern("@{{ field.snakecase_name }}"), {{ fn_prefix }}__to_ruby(&(variant->{{ field.snakecase_name | escape_c_keyword }})));
    {% endfor %}
    return rb_result;
}
{% endfor %}

static VALUE LIB_RUBY_PARSER_Node__to_ruby(LIB_RUBY_PARSER_Node *node)
{
    switch(node->tag)
    {
{% for node in nodes %}
        case LIB_RUBY_PARSER_NODE_{{ node.camelcase_name | camelcase_to_snakecase | upcase }}:
            return LIB_RUBY_PARSER_{{ node.camelcase_name }}__to_ruby(&(node->as.{{ node.camelcase_name | camelcase_to_snakecase | escape_c_keyword }}));
{% endfor %}
        default:
            return Qnil;
    }
}

#endif // NODES_H
